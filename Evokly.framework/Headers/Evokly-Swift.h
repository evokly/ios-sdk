// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIViewController;
@class NSURL;
@class UILocalNotification;

SWIFT_CLASS("_TtC6Evokly6Evokly")
@interface Evokly : NSObject

/// If your app have a capability of working in background, eg. Location Background Mode. Then setting this flag will result in ranging beacons non stop when user enters a region.
///
/// \param mode flag deciding if we want ot use full background mode.
+ (void)setFullBackgroundLocationMode:(BOOL)mode;

/// If you want to support Advertising Identifier, you should get if iOS and pass to this function. This will require you to set a proper policy, when distributing the app.
///
/// \param idfa A identifier that defines an app install.
+ (void)setIFDA:(NSString * _Nonnull)idfa;

/// Register and start evokly. Call this in AppDelegate didFinishLaunching. This method reponds to only a first call.
///
/// \param subdomain Your subdomain from Evokly website.
///
/// \param publicApiKey Your API key obtainted on Evokly website.
+ (void)registerWithSubdomain:(NSString * _Nonnull)subdomain publicApiKey:(NSString * _Nonnull)publicApiKey;

/// Presents a debug ViewController. Including: triggers, actions and beacons information.
///
/// \param parent A parent controller from whom the debug should be presented.
+ (void)presentDebugViewControllerWithParent:(UIViewController * _Nonnull)parent;

/// Evokly handles url with "evokly-<subdomain>" prefix. Call this function from URL handling AppDelegate function.
///
/// \param url URL to handle
///
/// \param sourceApplication App that invoked the URL
///
/// \returns  A boolean indicating whether this url was handled by Evokly. If false, you should handle the url.
+ (BOOL)handleURL:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication;

/// Evokly shows a notification when user is in a beacon range. Handling this notification is Evokly responsibility. Call this method from respective AppDelegate function.
///
/// \param notification A local notification instance.
///
/// \returns  A boolean deciding whether it was a Evokly notification. If false, you should handle the notification.
+ (BOOL)handleNotification:(UILocalNotification * _Nonnull)notification;
+ (NSString * _Nonnull)getVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSData (SWIFT_EXTENSION(Evokly))
@end


@interface NSDate (SWIFT_EXTENSION(Evokly))
@end


@interface NSURL (SWIFT_EXTENSION(Evokly))
@end


@interface UIColor (SWIFT_EXTENSION(Evokly))
@end


@interface UIImageView (SWIFT_EXTENSION(Evokly))
@end


@interface UIViewController (SWIFT_EXTENSION(Evokly))
@end

#pragma clang diagnostic pop
